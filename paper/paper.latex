%%%% Proceedings format for most of ACM conferences (with the exceptions listed below) and all ICPS volumes.
\documentclass[sigconf]{acmart}
%%%% As of March 2017, [siggraph] is no longer used. Please use sigconf (above) for SIGGRAPH conferences.

%%%% Proceedings format for SIGPLAN conferences 
% \documentclass[sigplan, anonymous, review]{acmart}

%%%% Proceedings format for SIGCHI conferences
% \documentclass[sigchi, review]{acmart}

%%%% To use the SIGCHI extended abstract template, please visit
% https://www.overleaf.com/read/zzzfqvkmrfzn


\usepackage{booktabs} % For formal tables


% Copyright
% \setcopyright{none}
%\setcopyright{acmcopyright}
%\setcopyright{acmlicensed}
\setcopyright{rightsretained}
%\setcopyright{usgov}
%\setcopyright{usgovmixed}
%\setcopyright{cagov}
%\setcopyright{cagovmixed}


% DOI
\acmDOI{10.475/123_4}

% ISBN
\acmISBN{123-4567-24-567/08/06}

%Conference
\acmConference[WOODSTOCK'97]{ACM Woodstock conference}{July 1997}{El
  Paso, Texas USA}
\acmYear{1997}
\copyrightyear{2016}


\acmArticle{4}
\acmPrice{15.00}

% These commands are optional
%\acmBooktitle{Transactions of the ACM Woodstock conference}
\editor{Derrick Amponsa Afrifa}
\editor{Luke Matthew Lau}
\editor{Martino Mansoldo}


\begin{document}
% We need a short and succinct title
\title{CycleGAN Two Ways}
\subtitle{A Comparison of Unpaired Image-to-Image Translation Performance with CycleGAN implemented with various Machine Learning frameworks}
\subtitlenote{The full version of the author's guide is available as
  \texttt{acmart.pdf} document}


\author{Derrick Amponsa Afrifa}
\affiliation{%
  \institution{Trinity College, University of Dublin}
  \city{Dublin}
  \state{Republic of Ireland}
}
\email{afrifad@tcd.ie}

\author{Luke Lau}
\affiliation{%
  \institution{Trinity College, University of Dublin}
  \city{Dublin}
  \state{Republic of Ireland}
}
\email{laulu@tcd.ie}

\author{Martino Mansoldo}
\affiliation{%
  \institution{Trinity College, University of Dublin}
  \city{Dublin}
  \country{Republic of Ireland}}
\email{mansoldm@tcd.ie}


% The default list of authors is too long for headers.
\renewcommand{\shortauthors}{B. Trovato et al.}

\begin{abstract}
Although many Machine Learning libraries and frameworks implement the same set of algorithms, the manner in which they are implemented differs from library to library. One rarely finds objectively superior implementations. However, a number of key metrics can be used to evaluate the strengths and shortcomings of dissimilar approaches. This paper attempts to outline the differences in performance that result from distinct CycleGAN\cite{cyclegan} algorithms. Models are trained using the same data sets and key aspects of their performance are delineated. It is expected that an understanding of the nature of the differences will reveal new optimisation avenues.\break
1.Introduction. In one sentence, what's the topic?\break
2.State the problem you tackle\break
3.Summarize (in one sentence) why nobody else has adequately answered the research question yet\break
4.Explain, in one sentence, how you tackled the research question\break
5.In one sentence, how did you go about doing the research that follows from your big idea.\break
6.As a single sentence, what's the key impact of your research
\footnote{This is an abstract footnote}
\end{abstract}

%
% The code below should be generated by the tool at
% http://dl.acm.org/ccs.cfm
% Please copy and paste the code instead of the example below.
%
\begin{CCSXML}
<ccs2012>
 <concept>
  <concept_id>10010520.10010553.10010562</concept_id>
  <concept_desc>Computer systems organization~Embedded systems</concept_desc>
  <concept_significance>500</concept_significance>
 </concept>
 <concept>
  <concept_id>10010520.10010575.10010755</concept_id>
  <concept_desc>Computer systems organization~Redundancy</concept_desc>
  <concept_significance>300</concept_significance>
 </concept>
 <concept>
  <concept_id>10010520.10010553.10010554</concept_id>
  <concept_desc>Computer systems organization~Robotics</concept_desc>
  <concept_significance>100</concept_significance>
 </concept>
 <concept>
  <concept_id>10003033.10003083.10003095</concept_id>
  <concept_desc>Networks~Network reliability</concept_desc>
  <concept_significance>100</concept_significance>
 </concept>
</ccs2012>
\end{CCSXML}

\ccsdesc[500]{Computer systems organization~Embedded systems}
\ccsdesc[300]{Computer systems organization~Redundancy}
\ccsdesc{Computer systems organization~Robotics}
\ccsdesc[100]{Networks~Network reliability}


\keywords{machine learning, neural networks, generative adversarial networks}


\maketitle

\section{Introduction}
Generative Adversarial Networks (GANs) are a type of neural network, based around the architecture of a generator and discriminator competing against each other.
The generator tries to generate images from noise that are similar to the training data, whilst the discriminator tries to catch out the generator and distinguish the "fake" generated images from the real images.
CycleGAN\cite{cyclegan} builds upon this by having two generators that translate images between two categories, $G: X \rightarrow Y$ and $F: Y \rightarrow X$. Additionally, it adds a cycle-consistency loss, where images are converted over and back to their original category and the difference is minimised, so that $F(G(X)) \approx X$ holds.
The original implementation that accompanied the paper was in \href{https://github.com/junyanz/CycleGAN}{Torch}, a machine learning framework for Lua and precursor to PyTorch, however the authors also provided an implementation for \href{https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix}{PyTorch}.

Recently, TensorFlow has added high-level APIs for various GAN networks. We aim to investigate how faithfully these APIs recreate the results of the original CycleGAN implementations, given that they abstract away a lot of parameters and other details. 

\section{Related Work}
\section{Methodology}

We trained two datasets from the CycleGAN implementation repository: Images of Yosemite in Summer and in Winter, and photos taken with an iPhone and a DSLR. These were trained on the original PyTorch model of CycleGAN, and a TensorFlow model made using the CycleGAN APIs in \texttt{tf.contrib.gan}.

\subsection{PyTorch}
\subsection{TensorFlow}
TensorFlow provides a suite of tools for GANs in the experimental \texttt{tf.contrib.gan} module. It has functions for creating, training and evaluating GANs, including both the original model as well as variants such as StarGAN\cite{stargan}, ACGAN\cite{acgan} and of course, CycleGAN.
For CycleGAN, TensorFlow provides \texttt{tf.contrib.gan.cyclegan\_model}. The user of the API must supply the generator and discriminator, and TensorFlow will handle setting up the model to connect the two together.

The generator and discriminator models were created using the high-level \texttt{tf.contrib.layers} counterparts to the PyTorch implementation, including batch normalisation and reflective padding. The functions in \texttt{tf.contrib.gan} were left to their default parameters where possible, which matched those of the original paper.

The images needed to preprocessed so that they were the same size and had pixel values in the range $[-1,1]$. 

\section{Results & Discussion}

\section{Limitations & Outlook}
We observed small, checkerboard artefacts in the output images. Odena et. al describe the cause of these and methods to circumvent it\cite{odena2016deconvolution}.
% TensorFlow padding is funny?

\bibliographystyle{ACM-Reference-Format}
\bibliography{bibliography}

\end{document}

